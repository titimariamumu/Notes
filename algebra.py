# -*- coding: utf-8 -*-
"""Algebra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AGAavw_yEQntIvfrbTDvMzm9hxHrnikl
""

# W1: Ratios, proportions, and conversions

Set up a proportion:<br>
$\frac{n1}{d1}=\frac{n2}{d2}$

# Put a zero in for the unknown value
n1 = 1
d1 = 2
n2 = 4
d2 = 0

if n2==0:
    answer = d2 * n1 / d1
    print("n2 = ", answer)

if d2==0:
    answer = n2 * d1 / n1
    print("d2 = ", answer)

"""Question:

In solving a proportion, if one numerator is zero, does the other numerator have to be zero for the statement to be true?

__ yes

__ no

__ sometimes

# W2: Solving one variable inequalities
"""

import sympy
from sympy import symbols
from sympy.solvers import solve

x = symbols('x')

# Put the equation here
eq = 2*x - 4

print("x = ", solve(eq,x))

"""Questions:

In Python, what is the library you import to solve Algebra problems with variables?

__ symba

__ sympy

__ the sympsons

__ math


If you import sympy and define x as a variable, what would be the output from the following code?

example = 3*x - 12

equation = Eq(example,0)

solution = solve(equation,x)

print(solution)

__ 3

__ 4

__ [4]

__ x = 4

# W3: Percents, decimals, and fractions
"""

print(10**1)
print(10**2)
print(10**3)

print(10**0)

print(10**-1)
print(10**-2)
print(10**-3)

"""Questions:

Which of the following correctly represents "three hundreths" as a decimal?

__ 0.3

__ 0.03

__ 0.003

__ 100.3


Which of the following languages can you not use in Google Colaboratory?

__ HTML

__ LaTex

__ English

__ Sanskrit

# W4: Functions and Graphing

Function and a table of (x,y) values
"""

x = 5
y = 4*x + 3 # The function

print(x,",",y)

print("x \t y")

for x in range(11):
    y = 4*x + 3  # The function
    print(x, "\t", y)

"""Defning a Python function"""

def f(x):
   y = 4*x + 3
   return y

print(5, ",", f(5))

# Next, a loop
for x in range(11):
    print(x, "\t", f(x))

"""*Basic* blank graph"""

import matplotlib.pyplot as plt

fig, ax = plt.subplots()
plt.show()

"""Define dimensions of graph"""

import matplotlib.pyplot as plt

fig, ax = plt.subplots()

# Dimensions
plt.axis([-10,10,-10,10])

plt.show()

"""A better way to set dimensions"""

import matplotlib.pyplot as plt

xmin = -10
xmax = 10
ymin = -10
ymax = 20

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.show()

"""Display axis lines"""

import matplotlib.pyplot as plt

xmin = -10
xmax = 10
ymin = -10
ymax = 10

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.show()

"""Plot one point"""

import matplotlib.pyplot as plt

xmin = -10
xmax = 10
ymin = -10
ymax = 10

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis


plt.plot([5],[4], 'ro')

plt.show()

"""Plot several points as a function"""



import matplotlib.pyplot as plt

xmin = -10
xmax = 10
ymin = -10
ymax = 10

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

for x in range(10):
    y = 0.5*x + 1
    plt.plot([x],[y], 'ro')

plt.show()

"""Graph and table of (x,y) values"""

import matplotlib.pyplot as plt

xmin = -10
xmax = 10
ymin = -10
ymax = 10

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

print("x \t y")
for x in range(xmin, xmax+1):
    y = 0.5*x + 1
    plt.plot([x],[y], 'ro')
    print(x,"\t",y)

plt.show()

"""Question:

Which of the following would put a solid blue line on a graph?

__ plt.plot([0,0],[10,10],'b-')

__ plt.plot([0,0],[10,10],'bo')

__ plt.plot([0,10],[0,10],'b')

__ plt.plot([10,10],[10,10],'b^')

Question:

What Python library would you import to create arrays that you can graph?

__ nimby

__ numpy

__ math

__ graph

# W5: Linear Functions

(Bonus content: https://www.youtube.com/embed/Emeex5gi5uA)
"""

x1 = 1
y1 = 7
x2 = 2
y2 = 10

slope = (y2 - y1) / (x2 - x1)

print("slope = ", slope)

"""Next, developing equations...

"""

x1 = 632 #1
y1 = 84 #7
x2 = 1800 #2
y2 = 8 #10

# The slope is "m"
m = (y2 - y1) / (x2 - x1)

# The y intercept is "b"
b = y1 - m*x1

# The full equation
print("y = ", m, "x + ", b)

"""Also display the graph"""

import matplotlib.pyplot as plt

x1 = 2
y1 = 3
x2 = 6
y2 = 8

# Develop the equation y = mx + b
m = (y2 - y1) / (x2 - x1)
b = y1 - m*x1
print("y = ", m, "x + ", b)

# For the graph
xmin = -10
xmax = 10
ymin = -10
ymax = 10

# For the line on the graph
y3 = m*xmin + b
y4 = m*xmax + b

# Basic setup for the graph
fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

# Plot the linear function as a red line
plt.plot([xmin,xmax],[y3,y4],'r')

plt.show()

"""Questions:

If you have already defined these variables, which of the follwing is the correct slope formula?

__ slope = (x1 - x2) / (y1 - y2)

__ slope = (x2 - x1) / (y2 - y1)

__ slope = (x1 - y1) / (x2 - y2)

__ slope = (y2 - y1) / (x2 - x1)

If you know the slope ("m") and you have one (x,y) coordinate point, which of the following equations could you use to find "b," representing the y-intercept in Python?

__ y = mx +b

__ b = y - m*x

__ ax + by = c

__ (y2-y1)/(x2-x1)=m

# W6: Common Factors and Square Roots

The modulus (`%`) finds the remainder

1.   List item
2.   List item
"""

#print(5%3)

print(31%10)

"""Use the modulus in a loop to find factors"""

number = 12

# Find all factors
for test_factor in range(1,number+1):
    if number%test_factor==0:
        print(test_factor)

"""Reduce fractions to lowest terms"""

numerator = 12
denominator = 24
factor = 1

# Find greatest common factor
for test_factor in range(1,denominator+1):
    if numerator%test_factor==0 and denominator%test_factor==0:
        factor = test_factor

# Divide out greatest common factor
n = int(numerator/factor)
d = int(denominator/factor)

print("original: ", numerator, "/", denominator)
print("reduced: ", n, "/", d)

"""You can add this code to the decimal-to-fraction code



"""

# Get the decimal number to convert
digits = input("Enter a decimal number to convert: ")

# Convert to fraction
exponent = int(len(digits))-1
n = float(digits)
numerator = int(n * 10**exponent)
denominator = 10**exponent

# Reduce that fraction
factor = 1
for test_factor in range(1,denominator+1):
    if numerator%test_factor==0 and denominator%test_factor==0:
        factor = test_factor

# Divide out greatest common factor
num = int(numerator/factor)
den = int(denominator/factor)

# Output
print("The decimal is ", n)
print("The fraction is ", num, "/", den)

"""Next level... factoring square roots"""

import math

print(math.sqrt(24))

"""Divide out any perfect square factors. For example:<br>
 $\sqrt{12}$ = $\sqrt{4 * 3}$ = 2$\sqrt{3}$<br>
Because 4 is a square number, the square root of 4 is now outside the radical.
"""

import math

# number to factor
n = 12

# This variable will change
max_factor = 1

# The key ingredient
upper_limit = math.floor(math.sqrt(n)) + 1

# Find square factors
for maybe_factor in range(1,upper_limit):
    if n % (maybe_factor**2) == 0:
        max_factor = maybe_factor

# Results so far
print("n = ", n)
print("Square rooted factor = ", max_factor)
print("Square factor = ", max_factor**2)
print("integer: ", n/(max_factor**2))

"""Using Sympy to make this look nice"""

import math
import sympy
from sympy import symbols

n = 24

# Use these variables
upper_limit = math.floor(math.sqrt(n)) + 1
max_factor = 1
other_factor = 1
square_root = 1

# Slightly different variable strategy
for maybe_factor in range(1, upper_limit):
    if n % (maybe_factor**2) == 0:
        max_factor = maybe_factor**2

# Divide out the greatest square factor
other_factor = n/max_factor

# Output variables
square_root = int(math.sqrt(max_factor))
other_factor = int(other_factor)
output = square_root*sympy.sqrt(other_factor)

# Sympy output without print statement - must be last line
output

"""Questions:

What does the modulus (%) operator do in Python?

__ returns the percent

__ divides

__ returns the remainder when dividing

__ creates a space

What is a number that only has one and itself as factors?
__ prime

__ composite

__ rare

__ natural

##Project 1

See Project 1 file in "College Algebra - Full Course with Python Code" folder

[Video walkthrough of Project 1](https://www.youtube.com/embed/PdsvcZNPEEs://)

# W7: Graphing Systems of Equations

Use numpy library instead of a loop
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = -10
ymax = 10

# Define how many points to plot
points = 10*(xmax-xmin)

# Define the array of x values once
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

# line 1
y1 = 3*x
plt.plot(x, y1)

# line 2
y2 = x**3
plt.plot(x, y2)

ax.grid(True)
plt.show()

"""Question:

If you want to create an interactive plot with a slider to zoom in and out, where does most of the graphing code appear?

__ Within the interactive() function

__ In the slider

__ Within the function that the interactive() calls

__ Before all of the functions

# W8: Solving systems of equations (2 variables)

Simplest way to solve a system of equations. Set each equation equal to zero
"""

from sympy import *

x,y = symbols('x y')

# Equations set equal to zero
first = 2*x + y - 1
second = x - 2*y + 7

# The solution
print(linsolve([first, second], (x, y)))

"""Nicer looking output"""

from sympy import *

x,y = symbols('x y')

first = 2*x + y - 1
second = x - 2*y + 7


# parse finite set answer as coordinate pair
solution = linsolve([first, second], (x, y))
x_solution = solution.args[0][0]
y_solution = solution.args[0][1]

# Print a coordinate pair
print("(", x_solution, ",", y_solution, ")")

"""Solve and graph. Factor to change from "`0 = `" to "`y = `" preparing to graph"""

from sympy import *
from sympy.plotting import plot
from sympy import sqrt

var('x y')

# First equation set equal to zero, ready to solve
first = -x**2 - y + 10
#first = sqrt(x) - y

#Second equation set equal to zero, ready to solve
second = 2*x**2 - 2*y - 4
#second = -x + 5 - y

# Solve - can be linear or nonlinear equations
solution = nonlinsolve([first, second], (x, y))
for a in range(len(solution.args)):
    x_solution = solution.args[a][0]
    y_solution = solution.args[a][1]
    print("Solution = (", x_solution, ",", y_solution, ")")

# Sympy syntax for equation equal to zero, ready to factor
y_first = Eq(first,0)

# Sympy solve for y
y1 = solve(y_first,y)

# Same two steps for second equation
y_second = Eq(second,0)
y2 = solve(y_second,y)

# Show factored results
print("y = ", y1[0])
print("y = ", y2[0])

# Plot solution
x = symbols('x')
xmin = -10
xmax = 10
plot(y1[0], y2[0], (x,xmin,xmax))

"""Question:

Which of the following can SymPy do that matplotlib can't do?

__ Solve for a variable

__ Display an x-y axis

__ Graph an equation or two

__ Show tic marks on the graph

# W9: Applications of Linear Systems

In this unit, you will see how you can use the Algebra you learned so far to solve real world problems. The first video will look at key words that tell you what math operation to use. Then you will see how to apply some of your code to different problems.

[video 20
](https://www.youtube.com/embed/3ZM3XMn1QYo://)

Question:

Which of the following key words indicate subtraction?

__ plus, more, increase, up

__ difference, less, decrease, down

__ of, by, factor, area, times

__ out of, per, divided, quotient

The next video contains more examples of how to set up equations and use your Colab notebook to solve them.

[video 21
](https://www.youtube.com/embed/ZtypoUnNdAYp)

Question:

How can you make use of a Colab notebook to solve practical business problems?

__ Modify the equations in the code you already wrote

__ Copy your existing code and then modify it as necessary

__ Write new code based on the functions you already know

__ All of the above

# W10: Quadratic Equations

Solve a quadratic equation
"""

# Coefficient values
a = 1
b = 5
c = 6

print("y = ", a, "x**2 + ", b, "x + ", c)

# Vertex
vx = -b/(2*a)
vy = a*(vx**2) + b*vx + c
print("Vertex: (",vx,",",vy,")")

# Roots
d = b**2 - 4*a*c
if d>=0:
    root_1 = (-b + math.sqrt(d))/(2*a)
    root_2 = (-b - math.sqrt(d))/(2*a)
    print("Roots: x = ", root_1, " and x = ", root_2)
else:
    print("No real roots")

"""Graph a quadratic function

"""

import matplotlib.pyplot as plt
import numpy as np
import math

a = 1
b = 5
c = 6

print("y = ", a, "x**2 + ", b, "x + ", c)

# Vertex
vx = -b/(2*a)
vy = a*(vx**2) + b*vx + c
print("Vertex: (",vx,",",vy,")")

xmin = -10
xmax = 10
ymin = -10
ymax = 10
points = 10*(xmax-xmin)
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

# Graph the parabola
y1 = a*x**2 + b*x + c
plt.plot(x, y1)

# Plot the vertex point
plt.plot([vx],[vy], 'ro')

# Find and plot the roots
d = b**2 - 4*a*c
if d>=0:
    root_1 = (-b + math.sqrt(d))/(2*a)
    root_2 = (-b - math.sqrt(d))/(2*a)
    plt.plot([root_1, root_2],[0,0], 'go')
    print("Roots: x = ", root_1, " and x = ", root_2)

plt.show()

"""Question:

In Python code, what is the formula for the x value of the vertex?

__ x = -b/2a

__ x = -b/(2 * a)

__ x = b/2a

__ x = -b/2*a

##Project 2

See Project 2 file in "College Algebra - Full Course with Python Code" folder

[video walkthrough of Project 2](https://www.youtube.com/embed/EM0yNdZBdfQ)

# W11: Parent Graphs and Polynomials

Graphs with no slope and no x value<br>

y = 5
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(xmin,xmax,points)


fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot([xmin,xmax],[5,5],'r')

plt.show()

"""**Linear** graphs<br>
y = x
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, x)
plt.show()

"""Quadratic graphs<br>
y = x<sup>2</sup>
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, x**2)
plt.show()

"""Cubic graphs<br>
y = x<sup>3</sup>
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

# plt.plot(x, x**3)
plt.plot(x, x**3 - 2*x**2 - 3*x + 4)
plt.show()

"""Quartic graphs<br>
y = x<sup>4</sup>
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, x**4)
plt.show()

"""Quintic graphs<br>
y = x<sup>5</sup>
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, x**5)
plt.show()

"""Absolute value graphs<br>
y = |x|
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, abs(x))
plt.show()

"""Square root graphs<br>
y = $\sqrt{x}$
"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(0,xmax,points) #

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, np.sqrt(x))
# plt.plot(x, -np.sqrt(x))

plt.show()

"""
Square root with rational exponent<br>
y = x<sup>1/2</sup>"""

import matplotlib.pyplot as plt
import numpy as np

xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(0,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, x**(1/2))

plt.show()

"""Cube root of x<br>
y = x<sup>1/3</sup>
"""

import matplotlib.pyplot as plt
import numpy as np


xmin = -10
xmax = 10
ymin = - 10
ymax = 10
points = 4*(xmax-xmin)
x = np.linspace(xmin,xmax,points) #

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, np.cbrt(x))


plt.show()

"""Floor function<br>
y = $\lfloor x \rfloor$
"""

import matplotlib.pyplot as plt
import numpy as np
import math


xmin = -10
xmax = 10
ymin = -10
ymax = 10
points = 4*(xmax-xmin)
# x = np.linspace(xmin,xmax,points) #


fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, np.floor(x))
#for x in range(points):
 #   plt.plot([0.25*x - 10],[math.floor(0.25*x)-10], 'ro')

plt.show()

"""Exponential functions<br>
y = 2<sup>x</sup>
"""

import matplotlib.pyplot as plt
import numpy as np


xmin = -10
xmax = 10
ymin = -10
ymax = 10
points = 3*(xmax-xmin)
x = np.linspace(xmin,xmax,points) #


fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.plot(x, 2**x)


plt.show()

"""Question:

In numpy, what is the cube root of x?

__ cbrt(x)

__ cube_root(x)

__ root3(x)

__ root(x,3)

##Project 3

Build Three Math Games:

Scatter plot game
- Randomly generate points on a graph and the player has to input the (x,y) coordinates
- For added difficulty, make the graph larger

Algebra practice game
- Generate one-step and two-step problems with random integer values and the player has to input the answer
- Use positive and negative values. For added difficulty, make the numbers larger

Projectile game
- Display a "wall" with random height and location. Player has to move sliders to adjust a parabolic path to clear the wall
- For added difficulty, make a second level where players enter a, b, and c without sliders

# W12: Business Applications

Selling tee shirts example
"""

price = 10
demand = 50 - 2*price
revenue = price*demand
total_cost = 4*demand
profit = revenue - total_cost

print("price: ", price)
print("demand: ", demand)
print("revenue: ", revenue)
print("total cost: ", total_cost)
print("profit ", profit)

import matplotlib.pyplot as plt
import numpy as np

# price = x
# demand = y

price_1 = 2
demand_1 = 46
price_2 = 10
demand_2 = 30
m = (demand_2 - demand_1)/(price_2 - price_1)
b = demand_1 - m*price_1
# This becomes a y = mx + b equation

xmin = 0
xmax = 50
ymin = 0
ymax = 320
points = 10*(xmax-xmin)
x = np.linspace(xmin,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

plt.xlabel("Price")
plt.title("Financial Algebra")

# line 1
demand = m*x + b
#plt.ylabel("Demand")
#plt.plot(x, demand)

# line 2
revenue = x*demand
plt.plot(x, revenue)
plt.ylabel("Revenue")

plt.show()

"""Questions:

Which of the following business equations is not correct?

__ Profit = Revenue - Cost

__ Revenue = Price * Demand

__ Cost = Fixed Expenses + Variable Expenses

__ Marginal Revenue = Margins + Revenue

Which of the following is not true of supply and demand graphs?

__ The supply curve has a positive slope

__ The demand curve has a negative slope

__ The supply curve and demand curve will intersect

__ The supply curve and demand curve will always be straight lines

# W13: Simple and Compound Interest

Simple interest<br>
principle * rate * time = interest
"""

r = .05
t = 1
interest = p*r*t
print("interest = ", interest)

"""New amount = principle + interest"""

p = 1000
r = .05
t = 3
interest = p*r*t
a = p + interest
print("New amount = ", a)

"""he algebra for any percent increase:<br>
New amount = p + p*r<br>
new amount = p * (1 + r)<br>

"""

p = 1000
r = .05
a = p*(1+r)
print("New amount = ", a)

"""Compounding is adding the interest to the principle and then calculating percent increase from this new amount<br>
Original amount = P<br>
New amount = P*(1+r)<br>
Compounded again = P*(1+r)*(1+r)<br>
And again = P*(1+r)*(1+r)*(1+r) = P(1+r)<sup>3</sup>
"""

P = 1000
r = .05
t = 3
annuity = p*(1+r)**t

print("Annuity = ", annuity)

"""When the compunding happens `n` times per year, here is the formula:<br>


A = P(1 +  $\frac{r}{n})^{nt}$
"""

P = 1000
r = .05
t = 3
n = 12

# use extra parentheses
annuity = p*(1+(r/n))**(n*t)

print("Annuity = ", annuity)

"""the irrational number e"""

import math

print(math.e)

"""Continuous growth: Annuity = Pe<sup>rt</sup>"""

import math

p = 1000
r = .05
t = 3
n = 1000

n_times = p*(1+(r/n))**(n*t)

continuous = p*math.e**(r*t)

print(n_times, " or ", continuous)

"""Mortgage formula<br>
monthly payment = P$\frac{\frac{r}{12}(1 + \frac{r}{12})^{12t}}{(1 + \frac{r}{12})^{12t} - 1}$
"""

p = 240000
r = .055
t = 30

# Break down that formula into parts
numerator = (r/12)*(1+(r/12))**(12*t)
denominator = (1+(r/12))**(12*t) - 1
payment = round(p*numerator/denominator, 2)

print("monthly payment = ", payment)

"""Amortization (mortgage payment schedule)"""

p = 240000.00
r = .055
t = 30


# Break down that formula into parts
numerator = (r/12)*(1+(r/12))**(12*t)
denominator = (1+(r/12))**(12*t) - 1
payment = round(p* numerator/denominator, 2)

print("payment = ", payment)

# loop to show interest amounts
balance = p
print("month \t balance \t interest")
for a in range(12*t):
    interest = round(balance*r/12, 2)
    if a%24==0 or a==359:
        print(a, "\t", balance, "\t", interest)
    balance = round(balance+interest-payment,2)

"""Retirement account estimation"""

# Change these variables
p = 1000
r = .08
t = 38
monthly = 350

# The loop will update this variable
annuity = p

# loop for contribution and percent growth
for a in range(12*t):
    annuity = (annuity+monthly)*(1+(r/12))

print("annuity = ", round(annuity, 2))
print("Annual income from interest = ", round(annuity*r, 2))

"""Question:

In percent increase formulas, what does the "principle" refer to?

__ the main amount

__ the ending amount

__ the starting amount

__ the (1 + rate) multiplier

# W14: Exponents and Logarithms

Base 10, the common log
"""

import math

print(math.log(10000,10))

# Python weirdness
print(math.log(1000,10))

print(round(math.log(1000,10),4))

"""Base 2, or any other base"""

import math

print(math.log(15,2))

"""Natural log"""

import math

x = math.e**3
# e = 2.718281828

print(math.log(x))

"""A good use of natural log: how long will it take for an investment to double in value?<br>
Start with the continuous growth formula:<br>
A = Pe<sup>rt</sup><br>
If the amount is double, then annuity is two times the principle:<br>
2P = Pe<sup>rt</sup><br>
Divide both sides by P and get this:<br>
2 = e<sup>rt</sup><br>
Because of the base <i>e</i>, take the natural log of both sides and get this:<br>
ln(2) = rt<br>
Then divide by r to solve for t.<br>
$\frac{ln(2)}{r}$ = t
"""

import math

# Rate of increase as a decimal
r = .09

# Natural log of 2 divided by rate
t = round(math.log(2)/r)

print("It will double in ", t, " years")

"""Graphing"""

import matplotlib.pyplot as plt
import numpy as np
import math

xmin = -10
xmax = 10
ymin = -10
ymax = 10
points = 10*(xmax-xmin)
x = np.linspace(xmin,xmax,points)
x2 = np.linspace(.01,xmax,points)

fig, ax = plt.subplots()
plt.axis([xmin,xmax,ymin,ymax]) # window size
plt.plot([xmin,xmax],[0,0],'b') # blue x axis
plt.plot([0,0],[ymin,ymax], 'b') # blue y axis

# line 1
y1 = 2**x
#y1 = math.e**x
plt.plot(x, y1)

# line 2
y2 = np.log2(x2)
#y2 = np.log(x2)
plt.plot(x2, y2)

# line 3
y3 = x
plt.plot(x, y3)

plt.show()

"""Scientific notation"""

print(3.2*10**5)

"""Exponent -2 works fine"""

print(4.5*10**-2)

"""Exponent -3 gets weird"""

print(4.5*10**-3)

"""Exponent -4 requires round() to display decimal notation

"""

a = round(4.5*10**-4,5)
print(a)

"""Exponent -5 forces the scientific notation"""

a = round(4.5*10**-5,6)
print(a)

"""Convert to scientific notation"""

import math

a = .0005

exp = math.floor(math.log(a, 10))
n = round(a/(10**exp),2)

# This addresses rounding errors
if n>=10:
    exp = exp +1
    n = a/(10**exp)

print(a, " = ", n, "* 10**", exp)

"""Question:

What is log5(25)?

__ 0

__ 1

__ 2

__ 5

##Project 4

See Project 4 file in "College Algebra - Full Course with Python Code" folder

[walkthrough video](https://www.youtube.com/embed/c2AhGd6srJ0)

# W15: Graphing External Data

##Project 5 - Build a Data Graph Explorer
Your script should do the following:

Get a .csv file in three ways
- uploading it from the local computer
- getting a url from user input
- putting the url in the code
Use the Pandas library to save the .csv as a dataframe
Print headings and the first two rows
Store the column names as a list
Choose one or two columns and convert the data to Numpy arrays
Display data as a scatter plot or a line graph
Be able to do this for different column combinations, and interpret the graphs
"""

